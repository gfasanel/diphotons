{
   "#" : "---------------------------------------------------------------------------------------------------------------------",
   "#" : "Configuration file for templates_maker.py script.",
   "#" : "Run as ./templates_maker.py --load templates_maker.json --input-dir <input_dir> -o <outfile>",

   "#" : "Note: comments are not supported in JSON.",
   "#" : "The trick here is to encapsulate them as well formatted input with key #",
   "#" : "Configuration items are commented prepending an _ to the name (any other character would work)",

    "#" : "---------------------------------------------------------------------------------------------------------------------",
    "#" : "Dataset definition                                                                                                   ",
    "#" : "---------------------------------------------------------------------------------------------------------------------",
    "#" : "  %(sel)s is replaced with the appropriate string                                                                    ",
    "#" : "  fromat is <sample-name>:[[input-file][/file-folder]] order irrelevant                                                               ",
	
    "#" : "data to be fit                                                                                                       ",
    "data" : [
               "DoubleEG_13TeV:__infile__/%(sel)s"
             ],

    "#" : "data used for template making",
    "templates" : [
               "DoubleEG_13TeV:__infile__/%(sel)s"
             ],
    "templatesMC" : null ,
             
     "#" : "mc dataset",
    "prep_data" : true,
    "mc" : null,

     "#" : "mc dataset",
      "signals" : { 
      },

    "#" : "file names for different datasets. Files folder can be specified by --input-dir on the command line",
    "data_file"  : "output.root",
    "mc_file"    : null,
    "sig_file"    : null,  "#" : "implies to use same as mc",
    "templates_file" : null, "#" : "implies to use same as data",

    "#" : "categories for the input datasets",
    "categories" : [],
    "#" :  "groups of categories can be defined to resum some of the categories",
    "groups": {
        "EB"   : ["EBHighR9","EBLowR9"],
        "EE"   : ["EEHighR9","EELowR9"],
        "eta_inclusive"    : ["EBHighR9","EBLowR9","EEHighR9","EELowR9"]
        }, 

    "#" : "how to compose the tree name starting from sub-pieces       ",
    "#" : " %(sample)s is replaced with the items in dataset definition",
    "#" : " %(cat)s is replaced with the category name                 ", 
    "treeName": "trees/%(sample)s_%(cat)s",

    "preselection" : "((mass > 230 && max(abs(leadScEta),abs(subleadScEta))<1.5) || mass > 320)",   
    "selection"    : "cic",                              "#" : "nominal selection",
    
    "#" : "---------------------------------------------------------------------------------------------------------------------",
    "#" : "Fit definition                                                                                                       ",
    "#" : "---------------------------------------------------------------------------------------------------------------------",

    "dataset_variables" : ["rho","nvtx","run","lumi","event"],     "#" :"list of variables to be put in the dataset (other than the template ones)",
    "weight_expression" : "weight",           "#" :"event weight expression  ",

    "#" : "List of aliases. Used to define variables/simplify expressions selection.",
    "aliases"  : [ 

               "phoIsEB    := abs(phoScEta) < 1.5",
               "phoIsSB    := (((phoPhoIso - rho*phoPhoIsoEA) -0.0045*phoPt < 2. ) && (phoIsEB    && (phoSigmaIeIe    > 0.012) ))||( ((phoPhoIso - rho*phoPhoIsoEA) -0.003*phoPt < 11. ) &&!phoIsEB    && (phoSigmaIeIe>0.035 )  )",
               "leadIsEB    := abs(leadScEta) < 1.5",
               "subleadIsEB := abs(subleadScEta) < 1.5",
               "leadIsSB := (((leadPhoIso - rho*leadPhoIsoEA) -0.0045*leadPt < 2. ) && (leadIsEB    && (leadSigmaIeIe    > 0.012) ))||( ((leadPhoIso - rho*leadPhoIsoEA) -0.003*leadPt < 11. ) &&!leadIsEB    && (leadSigmaIeIe>0.035    )  )",
               "subleadIsSB := ((((subleadPhoIso - rho*subleadPhoIsoEA) -0.0045*subleadPt < 2. ) && (subleadIsEB    && (subleadSigmaIeIe    > 0.012) ))||( ((subleadPhoIso - rho*subleadPhoIsoEA) -0.003*subleadPt < 11. ) &&!subleadIsEB    && (subleadSigmaIeIe>0.035     )) )",
               "leadPrompt    := leadGenIso < 10. && leadMatchType == 1",
               "leadFake      := ! leadPrompt",
               "subleadPrompt := subleadGenIso < 10. && subleadMatchType == 1",
               "subleadFake   := ! subleadPrompt",
               "phoPrompt := phoGenIso < 10. && phoMatchType == 1",
               "phoFake   := ! phoPrompt",
               "phoPhoIsoEB    := ((phoPhoIso - rho*phoPhoIsoEA) -0.0045*phoPt < 0.25 ) && phoIsEB",
				"phoPhoIsoEE    := ((phoPhoIso - rho*phoPhoIsoEA) -0.003*phoPt < -0.5 )&& !phoIsEB",
               "subleadPhoIsoEB    := ((subleadPhoIso - rho*subleadPhoIsoEA) -0.0045*subleadPt < 0.25 ) && subleadIsEB ",
				"subleadPhoIsoEE    := ((subleadPhoIso - rho*subleadPhoIsoEA) -0.003*subleadPt < -0.5 ) && !subleadIsEB",
               "leadPhoIsoEB    := ((leadPhoIso - rho*leadPhoIsoEA) -0.0045*leadPt < 0.25 ) && leadIsEB ",
				"leadPhoIsoEE    := ((leadPhoIso - rho*leadPhoIsoEA) -0.003*leadPt < -0.5 )&& !leadIsEB",

	       "mgg := mass",
	       "mggEBEB := mass",
               "mggEBEE := mass"    
	       ],

    "rootstyle_extra" : [
                  "TGaxis::SetMaxDigits(3);",
                  "TH1::SetDefaultSumw2(1);"
    ],

    "fits" : {
        "cic2" : {
            "ndim"       : 2,                                                                "#" : "number of dimensions for the template  ",
            "bins"       : [ "mass", [500.0,1300.0] ],                                       "#" : "kinematic bins in which the fit is run ",
            "template_binning" : [ 0.0, 0.1, 5.0, 15.0 ],                                    "#" : "template varaible binning              ",
		
            "selection"    : "cic",
            "components" : [  ],                                             "#" : "list of fit components                 ",
            "dataset_variables" : ["mgg","mass","mggEBEB:=mgg","mggEBEE:=mgg","mggGen:=genMass","leadPt","subleadPt","leadEta","subleadEta", "leadMatchType", "subleadMatchType","leadR9","subleadR9"],      "#" : "additional variables to be stored      ",
            "store_trees" : true,	
            "categories" : {
                "EBEB" : { 
                    "src"  : "EB",
                     "fill" : { 
                         "TMath::Even(event)" :[ "leadChIso", "subleadChIso" ],
                         "! TMath::Even(event)" :[ "subleadChIso", "leadChIso" ]
                      }
                }, 
                "EBEE" : { "src" : "EE" ,
                        "fill" : { 
                        "leadIsEB && ! subleadIsEB" :[ "leadChIso", "subleadChIso" ],
                            "! leadIsEB && subleadIsEB" :[ "subleadChIso", "leadChIso" ]
                       }
                }
            },
	    "signals" : "__all__", 
		"truth_selection" : {
			},
            "templates" : {
	    }
	}	


    }
    
}
